{"version":3,"sources":["Snake.js","Food.js","App.js","reportWebVitals.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","console","log","getRandomCoordiates","Math","floor","random","initialState","snakeFood","speed","direction","score","gameStart","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","bind","document","onkeydown","this","setInterval","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","clearInterval","onGameOver","snake","pop","forEach","food","growSnake","raiseSpeed","newSnake","unshift","alert","Snake","Food","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.684778b0.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) =>{\n    return(\n        <div>\n            {props.snakeDots.map((dot,i) => {\n                const style = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`,\n                }\n                return(\n                    <div className=\"snake-dot\" key={i} style={style}></div>\n                )\n            })}\n        </div>\n    )\n}","import React from 'react';\n\nexport default (props) =>{\n\n    console.log(props);\n    return(\n        <div className=\"snake-food\" style={{\n            left: `${props.dot[0]}%`,\n            top: `${props.dot[1]}%`\n        }}>\n        </div>\n    )\n}","import React, {Component} from 'react'\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandomCoordiates = () => {\n  let min = 1;\n  let max = 90;\n  let x = Math.floor(((Math.random()*(max-min+1)+min)/10))*10;\n  let y = Math.floor(((Math.random()*(max-min+1)+min)/10))*10;\n  return [x,y];\n}\n\nconst initialState ={\n  snakeFood: getRandomCoordiates(),\n  speed: 100,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [10,0]\n  ],\n  score: 0,\n  gameStart: false\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.gameStart = this.gameStart.bind(this);\n  }\n  state = initialState\n\n  componentDidMount(){\n    document.onkeydown = this.onKeyDown;\n  }\n\n  gameStart(){\n    this.gameStart = setInterval(() => {\n      this.moveSnake()\n    }, this.state.speed);\n  }\n\n  componentDidUpdate(){\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n  componentWillUnmount() {\n    clearInterval(this.gameStart);\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode){\n      case 38:\n        if(this.state.direction !== 'DOWN')this.setState({direction:'UP'});\n        break;\n      case 40:\n        if(this.state.direction !== 'UP')this.setState({direction:'DOWN'});\n        break;\n      case 37:\n        if(this.state.direction !== 'RIGHT')this.setState({direction:'LEFT'});\n        break;\n      case 39:\n        if(this.state.direction !== 'LEFT')this.setState({direction:'RIGHT'});\n        break;\n    }\n  }\n\n  checkIfOutOfBorders(){\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if(head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1]<0){\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed(){\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length-1];\n    snake.pop();\n    snake.forEach(dot => {\n      if(head[0] === dot[0] && head[1] === dot[1]){\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat(){\n    let head = this.state.snakeDots[this.state.snakeDots.length -1];\n    let food = this.state.snakeFood;\n    if(head[0] === food[0] && head[1] === food[1]){\n      this.setState({\n        snakeFood:getRandomCoordiates()\n      });\n      this.growSnake();\n      this.raiseSpeed();\n    }\n  }\n\n  growSnake(){\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake,\n      score: this.state.score + 1\n    })\n  }\n\n  raiseSpeed(){\n    if(this.state.speed > 10){\n      this.setState({speed: this.state.speed - 10});\n    }\n  }  \n\n  onGameOver(){\n    alert(`GameOver: you got me ${this.state.score} times <3`);\n    this.setState(initialState);\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 10, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 10, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 10];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 10];\n        break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots:dots\n    })\n  }\n\n  render(){\n    return (\n    <>\n      <div className=\"App game-area\">\n        <Snake snakeDots={this.state.snakeDots}></Snake>\n        <Food dot={this.state.snakeFood}></Food>\n      </div>\n      <button onClick={this.gameStart}>Start</button>\n    </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}